name: CI/CD Pipeline for Patient Charges Prediction

# Trigger the workflow on push to main branch and pull requests
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Environment variables
env:
  DOCKER_IMAGE_NAME: patient-charges-app
  DOCKER_TAG: latest

jobs:
  # Job 1: Run tests
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Train model for testing
      run: |
        python train_model.py
        
    - name: Run unit tests
      run: |
        python -m pytest test_app.py -v --tb=short
        
    - name: Run basic validation tests
      run: |
        python test_app.py

  # Job 2: Build and test Docker image
  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }} .
        
    - name: Test Docker image
      run: |
        # Run container in background
        docker run -d -p 5000:5000 --name test-container ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}
        
        # Wait for container to start
        sleep 10
        
        # Test if container is running
        docker ps | grep test-container
        
        # Test if application responds (basic health check)
        timeout 30 bash -c 'until curl -f http://localhost:5000/; do sleep 2; done' || echo "Application not responding"
        
        # Clean up
        docker stop test-container
        docker rm test-container
        
    - name: List Docker images
      run: docker images
      
  # Job 3: Security scan (optional)
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image for scanning
      run: |
        docker build -t ${{ env.DOCKER_IMAGE_NAME }}:scan .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.DOCKER_IMAGE_NAME }}:scan'
        format: 'table'
        exit-code: '0'  # Don't fail on vulnerabilities for now
        
  # Job 4: Deploy (simulation - would push to registry in real scenario)
  deploy:
    name: Deploy Simulation
    runs-on: ubuntu-latest
    needs: [test, docker-build, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Simulate deployment
      run: |
        echo "ðŸš€ Deployment simulation"
        echo "âœ… All tests passed"
        echo "âœ… Docker image built successfully"
        echo "âœ… Security scan completed"
        echo "ðŸŽ‰ Ready for deployment to production!"
        echo ""
        echo "In a real scenario, this would:"
        echo "- Push to Docker Hub/Registry"
        echo "- Deploy to cloud platform (Azure, AWS, GCP)"
        echo "- Update production environment"
        
    - name: Generate deployment summary
      run: |
        echo "## Deployment Summary ðŸ“‹" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: âœ… Success" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: ${{ env.DOCKER_IMAGE_NAME }}:${{ env.DOCKER_TAG }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Python Version**: 3.10" >> $GITHUB_STEP_SUMMARY
        echo "- **Deployment Target**: Production Ready" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tests Results ðŸ§ª" >> $GITHUB_STEP_SUMMARY
        echo "- Model Loading: âœ…" >> $GITHUB_STEP_SUMMARY
        echo "- Model Prediction: âœ…" >> $GITHUB_STEP_SUMMARY
        echo "- Data Validation: âœ…" >> $GITHUB_STEP_SUMMARY
        echo "- Docker Build: âœ…" >> $GITHUB_STEP_SUMMARY 